// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'dart:typed_data';

import 'package:wasm/wasm.dart';

/// This is a simple 'hello world'-style example.
///
/// You can use this example to check if you've set up wasm correctly.
/// To make this example work, you will need to run 'dart run wasm:setup'
/// and follow the instructions there. (Note: you will need Rust for building
/// the Wasmer WASM engine).
void main() {
  // int64_t square(int64_t n) { return n * n; }
  final data = Uint8List.fromList([
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x01, 0x60, //
    0x01, 0x7e, 0x01, 0x7e, 0x03, 0x02, 0x01, 0x00, 0x04, 0x05, 0x01, 0x70,
    0x01, 0x01, 0x01, 0x05, 0x03, 0x01, 0x00, 0x02, 0x06, 0x08, 0x01, 0x7f,
    0x01, 0x41, 0x80, 0x88, 0x04, 0x0b, 0x07, 0x13, 0x02, 0x06, 0x6d, 0x65,
    0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72,
    0x65, 0x00, 0x00, 0x0a, 0x09, 0x01, 0x07, 0x00, 0x20, 0x00, 0x20, 0x00,
    0x7e, 0x0b,
  ]);
  final inst = wasmModuleCompileSync(data).builder().build();
  final fn = inst.lookupFunction('square');
  const input = 1234;
  final result = fn(input) as int;
  print('$result == ${input * input}');
}
