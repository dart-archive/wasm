// Copyright (c) 2020, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'bindgen.dart';
import 'bindgen_api.dart';

/// Creates a dart file from a [WasmInfo] that represents the import
/// and export information contained in a wasm module.
BindgenGeneratedDartFile bindgenToDart(
  WasmInfo info,
) {
  final importDelegateName = 'WasmImportDelegate_${info.moduleName}';
  final exportDelegateName = 'WasmExportDelegate_${info.moduleName}';
  final exportDelegateNameImpl = '_${exportDelegateName}Impl';
  final instanceBuilderName = (BindingBuilder).toString();
  final instance = (BindingInstance).toString();
  final moduleName = info.moduleName;
  final imports = info.imports;
  final exports = info.exports;
  String Function() paramBuilder() {
    int counter = 0;
    return () {
      final param = 'p$counter';
      counter++;
      return param;
    };
  }

  String typeToDartType(
    WasmType type,
  ) {
    switch (type) {
      case WasmType.unit:
        return 'void';
      case WasmType.int32:
        return 'int';
      case WasmType.unknown:
        return 'dynamic';
    }
  }

  String _lines(
    List<String> lines,
  ) {
    return lines.join('\n');
  }

  String _multilines(
    List<String> lines,
  ) {
    return lines.join('\n\n');
  }

  String functionToDartFunctionSignature(
    WasmFn fn,
  ) {
    if (fn.params.isEmpty) {
      return '  ${typeToDartType(fn.resultType)} \$${fn.name}()';
    } else {
      final idBuilder = paramBuilder();
      return _lines([
        '  ${typeToDartType(fn.resultType)} \$${fn.name}(',
        for (final a in fn.params) '    ${typeToDartType(a)} \$${idBuilder()},',
        '  )',
      ]);
    }
  }

  return BindgenGeneratedDartFile(
    content: _lines([
      '// ignore_for_file: type=lint',
      '// This was generated by wasm-bindgen.',
      "import 'package:wasm/wasm_bindgen_api.dart';",
      '',
      'void fillWasmModuleImports_$moduleName(',
      '  $instanceBuilderName builder,',
      '  $importDelegateName imports,',
      ') {',
      for (final a in imports) ...[
        () {
          final n = a.name;
          final nameStr = "'$n'";
          final m = "'$moduleName'";
          return '  builder.addImport($m, $nameStr, imports.\$$n);';
        }(),
      ],
      '}',
      '',
      '$exportDelegateName takeWasmModuleExports_$moduleName(',
      '  $instance instance,',
      ') {',
      '  return $exportDelegateNameImpl(instance);',
      '}',
      '',
      '/// Expected wasm imports.',
      'abstract class $importDelegateName {',
      if (imports.isNotEmpty)
        _multilines([
          for (final a in imports) ...[
            '${functionToDartFunctionSignature(a)};',
          ],
        ]),
      '}',
      '',
      '/// Available wasm exports.',
      'abstract class $exportDelegateName {',
      if (exports.isNotEmpty)
        _multilines([
          for (final a in exports) ...[
            '${functionToDartFunctionSignature(a)};',
          ],
        ]),
      '}',
      '',
      '// Everything below is internal.',
      '',
      ...() {
        const instanceName = '_instance';
        return [
          'class $exportDelegateNameImpl implements $exportDelegateName {',
          '  final $instance $instanceName;',
          '',
          '  const $exportDelegateNameImpl(',
          '    this.$instanceName,',
          '  );',
          if (exports.isNotEmpty) ...[
            '',
            _multilines([
              for (final a in exports)
                _lines([
                  '  @override',
                  '${functionToDartFunctionSignature(a)} {',
                  '    return this.$instanceName.invokeFunction(',
                  '      ${"'${a.name}'"},',
                  ...() {
                    if (a.params.isEmpty) {
                      return [
                        '      [],',
                      ];
                    } else {
                      final b = paramBuilder();
                      return [
                        '      [',
                        _lines([
                          for (final _ in a.params) '        ${b()},',
                        ]),
                        '      ],',
                      ];
                    }
                  }(),
                  '    );',
                  '  }',
                ]),
            ]),
          ],
          '}',
        ];
      }(),
    ]),
  );
}

class BindgenGeneratedDartFile {
  final String content;

  const BindgenGeneratedDartFile({
    required this.content,
  });
}
